version: '3.8'

services:
  api-gateway:
    build:
      context: ./ApiGateway
    ports:
      - "8080:8080"
    depends_on:
      - event-service
      - notification-service
      - user-service

  event-service:
    build:
      context: ./EventService
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  notification-service:
    build:
      context: ./NotificationService
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  user-service:
    build:
      context: ./UserService
    ports:
      - "8083:8083"
    depends_on:
      - postgres

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
    volumes:
      - kafka_data:/bitnami/kafka

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
volumes:
  pgdata:
  kafka_data: